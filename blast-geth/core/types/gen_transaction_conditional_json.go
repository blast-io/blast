// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*transactionConditionalMarshalling)(nil)

// MarshalJSON marshals as JSON.
func (t TransactionConditional) MarshalJSON() ([]byte, error) {
	type TransactionConditional struct {
		KnownAccounts  KnownAccounts         `json:"knownAccounts"`
		BlockNumberMin *math.HexOrDecimal256 `json:"blockNumberMin,omitempty"`
		BlockNumberMax *math.HexOrDecimal256 `json:"blockNumberMax,omitempty"`
		TimestampMin   *math.HexOrDecimal64  `json:"timestampMin,omitempty"`
		TimestampMax   *math.HexOrDecimal64  `json:"timestampMax,omitempty"`
	}
	var enc TransactionConditional
	enc.KnownAccounts = t.KnownAccounts
	enc.BlockNumberMin = (*math.HexOrDecimal256)(t.BlockNumberMin)
	enc.BlockNumberMax = (*math.HexOrDecimal256)(t.BlockNumberMax)
	enc.TimestampMin = (*math.HexOrDecimal64)(t.TimestampMin)
	enc.TimestampMax = (*math.HexOrDecimal64)(t.TimestampMax)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TransactionConditional) UnmarshalJSON(input []byte) error {
	type TransactionConditional struct {
		KnownAccounts  *KnownAccounts        `json:"knownAccounts"`
		BlockNumberMin *math.HexOrDecimal256 `json:"blockNumberMin,omitempty"`
		BlockNumberMax *math.HexOrDecimal256 `json:"blockNumberMax,omitempty"`
		TimestampMin   *math.HexOrDecimal64  `json:"timestampMin,omitempty"`
		TimestampMax   *math.HexOrDecimal64  `json:"timestampMax,omitempty"`
	}
	var dec TransactionConditional
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.KnownAccounts != nil {
		t.KnownAccounts = *dec.KnownAccounts
	}
	if dec.BlockNumberMin != nil {
		t.BlockNumberMin = (*big.Int)(dec.BlockNumberMin)
	}
	if dec.BlockNumberMax != nil {
		t.BlockNumberMax = (*big.Int)(dec.BlockNumberMax)
	}
	if dec.TimestampMin != nil {
		t.TimestampMin = (*uint64)(dec.TimestampMin)
	}
	if dec.TimestampMax != nil {
		t.TimestampMax = (*uint64)(dec.TimestampMax)
	}
	return nil
}
